{"version":3,"sources":["Components/AppChart.js","Components/Menu.js","Components/MainPage.js","App.js","reportWebVitals.js","index.js"],"names":["AppChart","props","ch","trends","data","i","S","length","I","time","R","E","state","char","ResponsiveContainer","width","height","LineChart","this","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","Label","value","position","Tooltip","Legend","align","verticalAlign","iconSize","Line","type","stroke","strokeWidth","className","graph_props","num_nodes","num_edges","edge_density","num_groups","average_group_size","avg_degree","res_props","React","Component","AppMenu","handleSubmit","axios","post","headers","mode","cache","credentials","redirect","referrerPolicy","then","x","handleResult","catch","err","console","log","read_edgelist","e","a","preventDefault","reader","FileReader","onload","lines","target","result","split","map","trim","setState","edge_list","readAsText","files","read_grouplist","group_list","useRandomGraph","randomGraphModel","randomGraphProperties","n","p","k","diffusionModel","diffusionTransmissionRate","diffusionExposureToInfectedRate","diffusionRecoveryRate","diffusionInitialInfected","numberOfIterations","UseHigherOrderTransmition","useHigherOrderRandomGraph","higherOrderRandomGraphProperties","m","higherOrderDiffusionModel","higherOrderDiffusionTransmissionRate","HigherOrderDiffusionThreshold","Box","sx","minWidth","ButtonGroup","variant","fullWidth","Button","onClick","FormControl","InputLabel","id","Select","labelId","onChange","MenuItem","component","hidden","TextField","defaultValue","label","inputProps","min","step","max","title","placement","FormControlLabel","control","Checkbox","checked","color","MainPage","res","results_recieved","undefined","results","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.be625b61.chunk.js","sourcesContent":["import React from \"react\";\nimport Box from \"@mui/material/Box\";\nimport {\n  LineChart,\n  CartesianGrid,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  Line,\n  ResponsiveContainer,\n  Label,\n} from \"recharts\";\n\nclass AppChart extends React.Component {\n  constructor(props) {\n    super(props);\n    let ch = [];\n    let trends = props.data.trends;\n\n    if (\"R\" in trends && \"E\" in trends) {\n      for (let i = 0; i < trends.S.length; i++) {\n        ch = [\n          ...ch,\n          {\n            I: trends.I[i],\n            S: trends.S[i],\n            time: i,\n            R: trends.R[i],\n            E: trends.E[i],\n          },\n        ];\n      }\n    } else if (\"R\" in trends) {\n      for (let i = 0; i < trends.S.length; i++) {\n        ch = [\n          ...ch,\n          { I: trends.I[i], S: trends.S[i], time: i, R: trends.R[i] },\n        ];\n      }\n    } else if (\"E\" in trends) {\n      for (let i = 0; i < trends.S.length; i++) {\n        ch = [\n          ...ch,\n          { I: trends.I[i], S: trends.S[i], time: i, E: trends.E[i] },\n        ];\n      }\n    } else {\n      for (let i = 0; i < trends.S.length; i++) {\n        ch = [...ch, { I: trends.I[i], S: trends.S[i], time: i }];\n      }\n    }\n\n    this.state = {\n      char: ch,\n    };\n  }\n\n  render() {\n    return (\n      <>\n        <ResponsiveContainer width=\"100%\" height={430}>\n          <LineChart\n            // width={730}\n            // height={250}\n            data={this.state.char}\n            margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n          >\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey=\"time\" />\n\n            <YAxis>\n              <Label value=\"&rho;\" position=\"left\" />\n            </YAxis>\n            <Tooltip />\n            <Legend align=\"right\" verticalAlign=\"top\" iconSize={30} />\n            <Line\n              type=\"monotone\"\n              dataKey=\"S\"\n              stroke=\"#1ad3e8\"\n              strokeWidth=\"3\"\n            />\n            <Line\n              type=\"monotone\"\n              dataKey=\"I\"\n              stroke=\"#d9295b\"\n              strokeWidth=\"3\"\n            />\n            {\"R\" in this.props.data.trends ? (\n              <Line\n                type=\"monotone\"\n                dataKey=\"R\"\n                stroke=\"#1ae84a\"\n                strokeWidth=\"3\"\n              />\n            ) : (\n              \"\"\n            )}\n            {\"E\" in this.props.data.trends ? (\n              <Line\n                type=\"monotone\"\n                dataKey=\"E\"\n                stroke=\"#1a344a\"\n                strokeWidth=\"3\"\n              />\n            ) : (\n              \"\"\n            )}\n          </LineChart>\n        </ResponsiveContainer>\n\n        <div className=\"container\">\n          <div className=\"row mt-3 pl-3 px-5\">\n            <div className=\"col-lg-4 border border-4 m-3\">\n              <p># of Nodes: {this.props.graph_props.num_nodes}</p>\n              <p># of Edges: {this.props.graph_props.num_edges}</p>\n              <p>Edge Density: {this.props.graph_props.edge_density}</p>\n            </div>\n\n            <div className=\"col-lg-4 border border-4 m-3\">\n              <p># of Groups: {this.props.graph_props.num_groups}</p>\n              <p>\n                Average Group Size: {this.props.graph_props.average_group_size}\n              </p>\n              <p>Average Degree: {this.props.graph_props.avg_degree}</p>\n            </div>\n\n            <div className=\"col-lg-8 border border-4 m-3\">\n              <p>\n                Average ratio of Sucseptible Nodes: {this.props.res_props.S}\n              </p>\n              <p>Average ratio of Infected Nodes: {this.props.res_props.I}</p>\n              {\"E\" in this.props.res_props ? (\n                <p>Average ratio of Exposed Nodes: {this.props.res_props.E}</p>\n              ) : (\n                \"\"\n              )}\n              {\"R\" in this.props.res_props ? (\n                <p>Average ratio of Removed Nodes: {this.props.res_props.R}</p>\n              ) : (\n                \"\"\n              )}\n            </div>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default AppChart;\n","import * as React from \"react\";\nimport Box from \"@mui/material/Box\";\nimport MenuItem from \"@mui/material/MenuItem\";\nimport FormControl from \"@mui/material/FormControl\";\nimport Select from \"@mui/material/Select\";\nimport {\n  ButtonGroup,\n  TextField,\n  Checkbox,\n  InputLabel,\n  Tooltip,\n} from \"@mui/material\";\nimport { Button } from \"@mui/material\";\nimport { FormControlLabel } from \"@mui/material\";\nimport axios from \"axios\";\n\nclass AppMenu extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      useRandomGraph: true,\n      randomGraphModel: 1,\n      randomGraphProperties: {\n        n: 100,\n        p: 0.1,\n        k: 1,\n      },\n      edge_list: [],\n      group_list: [],\n      diffusionModel: 1,\n      diffusionTransmissionRate: 0.1,\n      diffusionExposureToInfectedRate: 0.1,\n      diffusionRecoveryRate: 0.1,\n      diffusionInitialInfected: 0.1,\n      numberOfIterations: 100,\n      UseHigherOrderTransmition: false,\n      useHigherOrderRandomGraph: true,\n      higherOrderRandomGraphProperties: {\n        m: 100,\n        p: 0.1,\n      },\n      higherOrderDiffusionModel: 1,\n      higherOrderDiffusionTransmissionRate: 0.1,\n      HigherOrderDiffusionThreshold: 0.5,\n    };\n  }\n\n  handleSubmit = () => {\n    // fetch('http://127.0.0.1:5000/model' ,\n    // {\n    //     // method: 'POST',\n    //     body: JSON.stringify({...this.state}),\n    //     // headers: {\n    //     //     'Content-Type': 'application/json'\n    //     // },\n    //     // mode: 'no-cors'\n    //     method: 'POST', // *GET, POST, PUT, DELETE, etc.\n    //     mode: 'no-cors', // no-cors, *cors, same-origin\n    //     cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n    //     credentials: 'same-origin', // include, *same-origin, omit\n    //     headers: {\n    //     'Content-Type': 'application/json'\n    //     // 'Content-Type': 'application/x-www-form-urlencoded',\n    //     },\n    //     redirect: 'follow', // manual, *follow, error\n    //     referrerPolicy: 'no-referrer',\n    // })\n    // .then(response=>{\n    //     console.log(response);\n    //     return response.json();\n    // })\n    // .then((dt)=>{console.log(dt)})\n    // .catch((err)=>{console.log(err)});\n    // let url = \"http://127.0.0.1:5000/model\";\n\n    let url = \"https://superimposition-backend.herokuapp.com/model\";\n    \n    axios\n      .post(\n        url,\n        { ...this.state },\n        {\n          headers: {\n            \"content-type\": \"application/json\",\n          },\n          mode: \"no-cors\",\n          cache: \"no-cache\",\n          credentials: \"same-origin\",\n          redirect: \"follow\",\n          referrerPolicy: \"no-referrer\",\n        }\n      )\n      .then((x) => this.props.handleResult(x.data))\n      .catch((err) => console.log(err));\n  };\n\n  read_edgelist = async (e) => {\n    e.preventDefault();\n    const reader = new FileReader();\n    reader.onload = async (e) => {\n      const lines = e.target.result.split(\"\\n\");\n      console.log(lines.map((i) => i.trim()));\n      this.setState({ ...this.state, edge_list: lines.map((i) => i.trim()) });\n    };\n    reader.readAsText(e.target.files[0]);\n  };\n\n  read_grouplist = async (e) => {\n    e.preventDefault();\n    const reader = new FileReader();\n    reader.onload = async (e) => {\n      const lines = e.target.result.split(\"\\n\");\n      console.log(lines.map((i) => i.trim()));\n      this.setState({ ...this.state, group_list: lines.map((i) => i.trim()) });\n    };\n    reader.readAsText(e.target.files[0]);\n  };\n\n  render() {\n    return (\n      <Box sx={{ minWidth: 120 }}>\n        <div className=\"pb-2 mt-2 mb-4 border-bottom h5\">Graph Properties</div>\n\n        <ButtonGroup\n          variant=\"outlined\"\n          aria-label=\"outlined primary button group\"\n          className=\"mb-3\"\n          fullWidth=\"true\"\n        >\n          <Button\n            onClick={() => {\n              this.setState({ ...this.state, useRandomGraph: true });\n            }}\n          >\n            {\" \"}\n            Random Graph{\" \"}\n          </Button>\n          <Button\n            onClick={() => {\n              this.setState({ ...this.state, useRandomGraph: false });\n            }}\n          >\n            {\" \"}\n            Edge List{\" \"}\n          </Button>\n        </ButtonGroup>\n\n        {/* Graph Properties */}\n\n        {this.state.useRandomGraph ? (\n          <FormControl fullWidth variant=\"standard\">\n            <InputLabel id=\"demo-simple-select-label\">Random Model</InputLabel>\n            <Select\n              fullWidth\n              labelId=\"demo-simple-select-label\"\n              id=\"demo-simple-select\"\n              // label = \"Random Graph Model\"\n              value={this.state.randomGraphModel}\n              onChange={(e) => {\n                this.setState({\n                  ...this.state,\n                  randomGraphModel: e.target.value,\n                });\n              }}\n            >\n              <MenuItem value={1}>Erdos-Renyi</MenuItem>\n              <MenuItem value={2}>Barabasi-Albert</MenuItem>\n              <MenuItem value={3}>Watts-Strogatz</MenuItem>\n            </Select>\n          </FormControl>\n        ) : (\n          <Button variant=\"contained\" component=\"label\" fullWidth>\n            Upload Edge List\n            <input type=\"file\" onChange={(e) => this.read_edgelist(e)} hidden />\n          </Button>\n        )}\n        <div className=\"mt-4 mb-2\">\n          {this.state.useRandomGraph && this.state.randomGraphModel === 1 ? (\n            <div>\n              <TextField\n                variant=\"standard\"\n                fullWidth=\"true\"\n                type=\"number\"\n                defaultValue=\"100\"\n                label=\"number of nodes\"\n                onChange={(e) => {\n                  this.setState({\n                    ...this.state,\n                    randomGraphProperties: {\n                      ...this.state.randomGraphProperties,\n                      n: e.target.value,\n                    },\n                  });\n                }}\n                inputProps={{ min: 0 }}\n              />\n\n              <TextField\n                variant=\"standard\"\n                fullWidth=\"true\"\n                className=\"mt-3\"\n                type=\"number\"\n                defaultValue=\"0.1\"\n                label=\"p [0,1]\"\n                onChange={(e) => {\n                  this.setState({\n                    ...this.state,\n                    randomGraphProperties: {\n                      ...this.state.randomGraphProperties,\n                      p: e.target.value,\n                    },\n                  });\n                }}\n                inputProps={{ min: 0, step: 0.01, max: 1 }}\n              />\n            </div>\n          ) : this.state.useRandomGraph && this.state.randomGraphModel === 2 ? (\n            <div>\n              <TextField\n                variant=\"standard\"\n                fullWidth\n                type=\"number\"\n                defaultValue=\"100\"\n                label=\"number of nodes\"\n                onChange={(e) => {\n                  this.setState({\n                    ...this.state,\n                    randomGraphProperties: {\n                      ...this.state.randomGraphProperties,\n                      n: e.target.value,\n                    },\n                  });\n                }}\n                inputProps={{ min: 0 }}\n              />\n\n              <TextField\n                variant=\"standard\"\n                fullWidth\n                className=\"mt-3\"\n                type=\"number\"\n                defaultValue=\"1\"\n                label=\"k\"\n                onChange={(e) => {\n                  this.setState({\n                    ...this.state,\n                    randomGraphProperties: {\n                      ...this.state.randomGraphProperties,\n                      k: e.target.value,\n                    },\n                  });\n                }}\n                inputProps={{ min: 0 }}\n              />\n            </div>\n          ) : this.state.useRandomGraph && this.state.randomGraphModel === 3 ? (\n            <div>\n              <TextField\n                variant=\"standard\"\n                fullWidth\n                type=\"number\"\n                defaultValue=\"100\"\n                label=\"number of nodes\"\n                onChange={(e) => {\n                  this.setState({\n                    ...this.state,\n                    randomGraphProperties: {\n                      ...this.state.randomGraphProperties,\n                      n: e.target.value,\n                    },\n                  });\n                }}\n                inputProps={{ min: 0 }}\n              />\n\n              <TextField\n                variant=\"standard\"\n                fullWidth\n                className=\"mt-3\"\n                type=\"number\"\n                defaultValue=\"1\"\n                label=\"k\"\n                onChange={(e) => {\n                  this.setState({\n                    ...this.state,\n                    randomGraphProperties: {\n                      ...this.state.randomGraphProperties,\n                      k: e.target.value,\n                    },\n                  });\n                }}\n                inputProps={{ min: 0 }}\n              />\n              <TextField\n                variant=\"standard\"\n                fullWidth=\"true\"\n                className=\"mt-3\"\n                type=\"number\"\n                defaultValue=\"0.1\"\n                label=\"p [0,1]\"\n                onChange={(e) => {\n                  this.setState({\n                    ...this.state,\n                    randomGraphProperties: {\n                      ...this.state.randomGraphProperties,\n                      p: e.target.value,\n                    },\n                  });\n                }}\n                inputProps={{ min: 0, step: 0.01, max: 1 }}\n              />\n            </div>\n          ) : (\n            \"\"\n          )}\n        </div>\n\n        {/* Diffusion Properties */}\n\n        <div className=\"pb-2 mt-4 mb-4 border-bottom h5\">\n          Diffusion Properties\n        </div>\n\n        <FormControl fullWidth variant=\"standard\">\n          <InputLabel id=\"demo-simple-select-label\">Diffusion Model</InputLabel>\n          <Select\n            variant=\"standard\"\n            fullWidth\n            className=\"mb-2\"\n            labelId=\"demo-simple-select-label\"\n            id=\"demo-simple-select\"\n            value={this.state.diffusionModel}\n            label=\"Diffusion Model\"\n            onChange={(e) => {\n              this.setState({ ...this.state, diffusionModel: e.target.value });\n            }}\n          >\n            <MenuItem value={1}>S - I - S</MenuItem>\n            <MenuItem value={2}>S - I - R</MenuItem>\n            <MenuItem value={3}>S - E - I - S</MenuItem>\n            <MenuItem value={4}>S - E - I - R</MenuItem>\n          </Select>\n        </FormControl>\n\n        <TextField\n          variant=\"standard\"\n          fullWidth\n          className=\"mb-2\"\n          type=\"number\"\n          defaultValue=\"0.1\"\n          label=\"Initial Infected Probability\"\n          onChange={(e) => {\n            this.setState({\n              ...this.state,\n              diffusionInitialInfected: e.target.value,\n            });\n          }}\n          inputProps={{ min: 0, step: 0.01, max: 1 }}\n        />\n\n        {this.state.diffusionModel < 3 ? (\n          <TextField\n            variant=\"standard\"\n            fullWidth\n            className=\"mb-2\"\n            type=\"number\"\n            defaultValue=\"0.1\"\n            label=\"Transmission Probability\"\n            onChange={(e) => {\n              this.setState({\n                ...this.state,\n                diffusionTransmissionRate: e.target.value,\n              });\n            }}\n            inputProps={{ min: 0, step: 0.01, max: 1 }}\n          />\n        ) : (\n          <>\n            <TextField\n              variant=\"standard\"\n              fullWidth\n              className=\"mb-2\"\n              type=\"number\"\n              defaultValue=\"0.1\"\n              label=\"Infection Probability\"\n              onChange={(e) => {\n                this.setState({\n                  ...this.state,\n                  diffusionExposureToInfectedRate: e.target.value,\n                });\n              }}\n              inputProps={{ min: 0, step: 0.01, max: 1 }}\n            />\n            <TextField\n              variant=\"standard\"\n              fullWidth\n              className=\"mb-2\"\n              type=\"number\"\n              defaultValue=\"0.1\"\n              label=\"Exposure Probability\"\n              onChange={(e) => {\n                this.setState({\n                  ...this.state,\n                  diffusionTransmissionRate: e.target.value,\n                });\n              }}\n              inputProps={{ min: 0, step: 0.01, max: 1 }}\n            />\n          </>\n        )}\n        {/* <TextField\n          variant=\"standard\"\n          fullWidth\n          className=\"mb-2\"\n          type=\"number\"\n          defaultValue=\"0.1\"\n          label=\"Transmission Probability\"\n          onChange={(e) => {\n            this.setState({\n              ...this.state,\n              diffusionTransmissionRate: e.target.value,\n            });\n          }}\n          inputProps={{ min: 0, step: 0.01, max: 1 }}\n        /> */}\n        <Tooltip\n          title=\"Hellp there how are you are you doing fine what is the date\"\n          placement=\"right\"\n        >\n          <TextField\n            variant=\"standard\"\n            fullWidth\n            className=\"mb-2\"\n            type=\"number\"\n            defaultValue=\"0.1\"\n            label=\"Recovery Probability\"\n            onChange={(e) => {\n              this.setState({\n                ...this.state,\n                diffusionRecoveryRate: e.target.value,\n              });\n            }}\n            inputProps={{ min: 0, step: 0.01, max: 1 }}\n          />\n        </Tooltip>\n\n        <TextField\n          variant=\"standard\"\n          fullWidth\n          className=\"mb-4 border-bottom\"\n          type=\"number\"\n          defaultValue=\"100\"\n          label=\"Number of Iterations\"\n          onChange={(e) => {\n            this.setState({\n              ...this.state,\n              numberOfIterations: e.target.value,\n            });\n          }}\n          inputProps={{ min: 0 }}\n        />\n        <FormControl fullWidth>\n          <FormControlLabel\n            fullWidth\n            className=\"border-top\"\n            control={\n              <Checkbox\n                onChange={(e) => {\n                  this.setState({\n                    ...this.state,\n                    UseHigherOrderTransmition: e.target.checked,\n                  });\n                }}\n              />\n            }\n            label=\"Higher-Order Transmission\"\n          />\n        </FormControl>\n\n        {/* Higher-order structure */}\n        {this.state.UseHigherOrderTransmition ? (\n          <div>\n            <div className=\"pb-2 mt-2 mb-4 border-bottom h5\">\n              Higher-Order Graph Properties\n            </div>\n\n            <ButtonGroup\n              variant=\"outlined\"\n              aria-label=\"outlined primary button group\"\n              className=\"mb-3\"\n            >\n              <Button\n                onClick={() => {\n                  this.setState({\n                    ...this.state,\n                    useHigherOrderRandomGraph: true,\n                  });\n                }}\n              >\n                {\" \"}\n                Random Intersection Graph{\" \"}\n              </Button>\n              <Button\n                onClick={() => {\n                  this.setState({\n                    ...this.state,\n                    useHigherOrderRandomGraph: false,\n                  });\n                }}\n              >\n                {\" \"}\n                Group List{\" \"}\n              </Button>\n            </ButtonGroup>\n\n            {this.state.useHigherOrderRandomGraph ? (\n              <div>\n                <TextField\n                  variant=\"standard\"\n                  fullWidth=\"true\"\n                  type=\"number\"\n                  defaultValue=\"100\"\n                  label=\"number of groups\"\n                  onChange={(e) => {\n                    this.setState({\n                      ...this.state,\n                      higherOrderRandomGraphProperties: {\n                        ...this.state.higherOrderRandomGraphProperties,\n                        m: e.target.value,\n                      },\n                    });\n                  }}\n                  inputProps={{ min: 0 }}\n                />\n\n                <TextField\n                  variant=\"standard\"\n                  fullWidth=\"true\"\n                  className=\"mt-3\"\n                  type=\"number\"\n                  defaultValue=\"0.1\"\n                  label=\"intersection probability\"\n                  onChange={(e) => {\n                    this.setState({\n                      ...this.state,\n                      higherOrderRandomGraphProperties: {\n                        ...this.state.higherOrderRandomGraphProperties,\n                        p: e.target.value,\n                      },\n                    });\n                  }}\n                  inputProps={{ min: 0, step: 0.01, max: 1 }}\n                />\n              </div>\n            ) : (\n              <Button fullWidth variant=\"contained\" component=\"label\">\n                Upload Group List\n                <input type=\"file\" hidden />\n              </Button>\n            )}\n\n            <div className=\"pb-2 mt-4 mb-3 border-bottom h5\">\n              Higher-Order Diffusion Properties\n            </div>\n\n            <FormControl fullWidth variant=\"standard\">\n              <InputLabel id=\"demo-simple-select-label\">\n                Diffusion Model\n              </InputLabel>\n              <Select\n                variant=\"standard\"\n                className=\"mb-2\"\n                labelId=\"demo-simple-select-label\"\n                id=\"demo-simple-select\"\n                value={this.state.higherOrderDiffusionModel}\n                label=\"Diffusion Model\"\n                fullWidth=\"true\"\n                onChange={(e) => {\n                  this.setState({\n                    ...this.state,\n                    higherOrderDiffusionModel: e.target.value,\n                  });\n                }}\n              >\n                <MenuItem value={1}>Triangle Diffusion</MenuItem>\n                <MenuItem value={2}>Clique Diffusion</MenuItem>\n                <MenuItem value={3}>Threshold Clique Diffusion</MenuItem>\n              </Select>\n            </FormControl>\n\n            <TextField\n              variant=\"standard\"\n              fullWidth=\"true\"\n              className=\"mb-2\"\n              type=\"number\"\n              defaultValue=\"0.1\"\n              label={\n                this.state.diffusionModel < 3\n                  ? \"Higher-Order Transmission Probability\"\n                  : \"Higher-Order Exposure Probability\"\n              }\n              onChange={(e) => {\n                this.setState({\n                  ...this.state,\n                  higherOrderDiffusionTransmissionRate: e.target.value,\n                });\n              }}\n              inputProps={{ min: 0, step: 0.01, max: 1 }}\n            />\n\n            {this.state.higherOrderDiffusionModel === 3 ? (\n              <TextField\n                variant=\"standard\"\n                fullWidth=\"true\"\n                className=\"mb-2\"\n                type=\"number\"\n                defaultValue=\"0.5\"\n                label=\"Higher-Order Diffusion Threshold\"\n                onChange={(e) => {\n                  this.setState({\n                    ...this.state,\n                    HigherOrderDiffusionThreshold: e.target.value,\n                  });\n                }}\n                inputProps={{ min: 0, step: 0.01, max: 1 }}\n              />\n            ) : (\n              \"\"\n            )}\n          </div>\n        ) : (\n          <p></p>\n        )}\n\n        <Button\n          fullWidth\n          type=\"submit\"\n          variant=\"contained\"\n          color=\"success\"\n          className=\"mb-3\"\n          // className={classes.button}\n          onClick={this.handleSubmit}\n        >\n          Run Model\n        </Button>\n      </Box>\n    );\n  }\n}\n// </FormControl>\nexport default AppMenu;\n","import React from \"react\";\nimport AppChart from \"./AppChart\";\nimport AppMenu from \"./Menu\";\nimport \"./App.css\";\n\nclass MainPage extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      results: {},\n      results_recieved: false,\n    };\n  }\n\n  handleResult = (res) => {\n    this.setState({ ...this.state, results_recieved: false });\n    if (res !== undefined) {\n      this.setState({\n        results: res[0],\n        results_recieved: true,\n        graph_props: res[1],\n        res_props: res[2],\n      });\n    }\n  };\n  //mt-4\n  render() {\n    return (\n      <div>\n        <div className=\"container\">\n          <div className=\"pb-2 pt-4 mb-4 border-bottom h3\">\n            Online Network Diffusion Simulator\n          </div>\n          <div className=\"row\">\n            <div className=\"col-lg-3 mt-1 b-2 border rounded border-4\">\n              <AppMenu handleResult={this.handleResult} />\n            </div>\n            <div className=\"col-lg-9 mt-1\">\n              <h3 className=\"text-center border-bottom border-4 pb-2 mb-2\">\n                Simulation Results\n              </h3>\n              {this.state.results_recieved ? (\n                <AppChart\n                  data={this.state.results}\n                  graph_props={this.state.graph_props}\n                  res_props={this.state.res_props}\n                />\n              ) : (\n                \"\"\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default MainPage;\n","import \"./App.css\";\nimport MainPage from \"./Components/MainPage\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nfunction App() {\n  return <MainPage/>;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}